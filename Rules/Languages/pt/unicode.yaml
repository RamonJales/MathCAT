---
 # Note to translators:
 #   most languages don't have two ways to pronounce 'a' -- if not need, remove the rules and change "B-Z" to "A-Z"
 #   some languages say the word for "uppercase" after the letter. Make sure to change that where appropriate by moving some code around
 - "a": 
    - test: 
        if: "$TTS='none'"
        then: [t: "a"]                          	#  long "a" sound in all speech engines I tested (espeak, MS SAPI, eloquence,	(en: 'eigh', google translation)
        else: [spell: "'a'"]                    	#     AWS Polly, ReadSpeaker, NaturalReader, google cloud, nuance, ibm watson)
 - "b-z": 
    - test: 
        if: "$TTS='none'"
        then: [T: "."]                          	# 	(en: '.', google translation)
        else: [spell: "'.'"]                       

 # Capital letters are a little tricky: users can pick their favorite word (something that was requested) and 
 # screen readers have options to use pitch changes or beeps instead of or in addition to say "cap"
 # Also, if a user can see the screen, they probably don't need to hear "cap", but if they specified an override, they must want to hear the override.

 - "A":
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [T: "maiúsculas"]             	# 	(en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"]
    - pitch:
        value: "$CapitalLetters_Pitch"
        replace:
        - test:
            if: "$TTS='none'"
            then: [T: "A"]                      	# 	(en: 'eigh', google translation)
            else: [spell: "'a'"]
            
 - "B-Z":
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [T: "maiúsculas"]             	# 	(en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"] 
    - pitch:
        value: "$CapitalLetters_Pitch"
        # note: processing of ranges converts '.' into the character, so it needs to be in quotes below
        replace: [spell: "translate('.', 'BCDEFGHIJKLMNOPQRSTUVWXYZ', 'bcdefghijklmnopqrstuvwxyz')"]

 - "0-9": [t: "A"]                              	# 	(en: '.', google translation)

 - "!":                                         	#  0x21
    - test:
        if: "ancestor-or-self::*[contains(@data-intent-property, ':structure:')]"
        then_test:
            if: "$Verbosity = 'Terse'"
            then: [t: "bang"]                   	#  0x21	(google translation)
            else: [T: "ponto de exclamação"]    	#  0x21	(en: 'exclamation point', google translation)
        else: [T: "fatorial"]                   	#  0x21	(en: 'factorial', google translation)
          
 - "\"": [T: "aspa"]                            	#  0x22	(en: 'quotation mark', google translation)
 - "#": [T: "hashtag"]                           	#  0x23	(en: 'number', google translation)
 - "$": [T: "cifrão"]                          	#  0x24	(en: 'dollars', google translation)
 - "%": [T: "por cento"]                        	#  0x25	(en: 'percent', google translation)
 - "&": [T: "e comercial"]                        	#  0x26	(google translation)
 - "'": [T: "apóstrofo"]                        	#  0x27	(en: 'apostrophe', google translation)
 - "(":                                         	#  0x28
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then_test:
            if: "$Verbosity='Terse'"
            then: [T: "abrir"]                  	#  0x28	(en: 'open', google translation)
            else: [T: "abre parênteses"]        	#  0x28	(en: 'open paren', google translation)
        else: [T: "parênteses esquerdo"]       	#  0x28	(en: 'left paren', google translation) #we dont say this in portuguese
 - ")":                                         	#  0x29
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then_test:
            if: "$Verbosity='Terse'"
            then: [T: "fechar"]                 	#  0x29	(en: 'close', google translation)
            else: [T: "fecha parênteses"]    	#  0x29	(en: 'close paren', google translation)
        else: [T: "parênteses direito"]        	#  0x29	(en: 'right paren', google translation) #we dont say this in portuguese

 - "*":                                         	#  0x2a
    test:
        if: "parent::*[name(.)='msup' or name(.)='msubsup' or name(.)='skip-super']"
        then: [T: "estrela"]                    	#  0x2a	(en: 'star', google translation)
        else: [T: "vezes"]                      	#  0x2a	(en: 'times', google translation)
        #how to add other word here?
 - "+": [T: "mais"]                             	#  0x2b	(en: 'plus', google translation)
 - ",":                                         	#  0x2c
    # the following deals with the interaction of "," with "…" which sometimes wants the ',' to be silent
    # that this test is here and not with "…" is not ideal, but seems simplest
     test:
        if:
            - "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_Ellipses = 'Auto' or "
               # must be ClearSpeak and $ClearSpeak_Ellipses = 'AndSoOn'
               # speak "comma" when not adjacent to '…'
            - "( following-sibling::*[1][text()!= '…'] and preceding-sibling::*[1][text()!='…']  ) or "
               # except if expression starts with '…'
            - "../*[1][text()='…'] "
        then: [T: "vírgula"]                    	# 	(en: 'comma', google translation)
        # else silent

 - "-": [T: "menos"]                            	#  0x2d	(en: 'minus', google translation)
 - ".":                                         	#  0x2e
    - test:
        if: "parent::*[1][self::m:mn]"
        then: [T: "ponto"]                    	# 	(en: 'point', google translation)
        else: [T: "ponto"]                      	# 	(en: 'dot', google translation)
 
 - "/": [T: "dividido por"]                     	#  0x2f	(en: 'divided by', google translation)
 - ":": [T: "dois pontos"]                            	#  0x3a	(en: 'colon', google translation)
 - ";": [T: "ponto e vírgula"]                  	#  0x3b	(en: 'semicolon', google translation)
 
 - "<":                                         	#  0x3c
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "menor que"                           	# 	(en: 'less than', google translation)

 - "=":                                         	#  0x3d
    - test: 
        if: "$Verbosity!='Terse'"
        then: [T: "é igual a"]                  	# 	(en: 'is equal to', google translation)
        else: [T: "igual"]                  	# 	(en: 'equals', google translation)

 - ">":                                         	#  0x3e
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "maior que"                           	# 	(en: 'greater than', google translation)
 
 - "?": [T: "ponto de interrogação"]            	#  0x3f	(en: 'question mark', google translation)
 
 - "@": [T: "arroba"]                         	#  0x40	(en: 'at sign', google translation)
 
 - "[":                                         	#  0x5b
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [T: "abre colchetes"]             	# 	(en: 'open bracket', google translation)
        else: [T: "colchete esquerdo"]           	# 	(en: 'left bracket', google translation)
 
 - "\\": [T: "contrabarra"]                  	#  0x5c	(en: 'back slash', google translation)
 #add other translation
 
 - "]":                                         	#  0x5d
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [T: "fecha colchetes"]             	# 	(en: 'close bracket', google translation)
        else: [T: "colchete direito"]            	# 	(en: 'right bracket', google translation)
 
 - "^": [T: "acento circunflexo"]                           	#  0x5e	(en: 'hat', google translation)
 - "_": [T: "underline"]                         	#  0x5f	(en: 'under bar', google translation)
 - "`": [T: "acento grave"]                             	#  0x60	(en: 'grave', google translation)
 
 - "{":                                         	#  0x7b
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [T: "abre chaves"]               	# 	(en: 'open brace', google translation)
        else: [T: "chave esquerda"]            	# 	(en: 'left brace', google translation)

 - "|":                                         	#  0x7c
    # note: for ClearSpeak and SimpleSpeak, "|" inside of sets is handled at the mrow level, same for 'sets'
     - test:
        - if: $SpeechStyle != 'ClearSpeak'
          then: [T: "linha vertical"]           	# 	(en: 'vertical line', google translation)
        - else_if: "$ClearSpeak_VerticalLine = 'SuchThat'"
          then: [T: "tal que"]          	# 	(en: 'such that', google translation)
        - else_if: "$ClearSpeak_VerticalLine = 'Given'"  
          then: [T: "dado"]                     	# 	(en: 'given', google translation)
        - else: [T: "divide"]                   	# 	(en: 'divides', google translation)

 - "}":                                         	#  0x7d
    - test:
        if: $SpeechStyle = 'ClearSpeak' or $SpeechStyle = 'SimpleSpeak'
        then: [T: "fecha chaves"]              	# 	(en: 'close brace', google translation)
        else: [T: "chave direita"]            	# 	(en: 'right brace', google translation)

 - "~": [T: "til"]                              	#  0x7e	(en: 'tilde', google translation)
 
 - " ":                                         	#  0xa0
    - test:
        if: "@data-empty-in-2D and ../../../../*[name(.)!='equations']"
        then: [T: "vazio"]                      	#  want to say something for fraction (etc) with empty child	(en: 'empty', google translation)
        else: [T: ""]                            

 - "¬": [T: "não"]                              	#  0xac	(en: 'not', google translation)
 
 - "°": [T: "graus"]                            	#  0xb0	(en: 'degrees', google translation)
 - "±": [T: "mais ou menos"]                    	#  0xb1	(en: 'plus or minus', google translation)
 - "´": [T: "agudo"]                            	#  0xb4	(en: 'acute', google translation)
 
 - "·":                                         	#  0xB7
    - test:
        if: "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_MultSymbolDot = 'Auto'"
        then: [T: "vezes"]                      	# 	(en: 'times', google translation)
        else: [T: "ponto"]                      	# 	(en: 'dot', google translation)
 - "×":                                         	#  0xd7
    - test:
        if: "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_MultSymbolX = 'Auto'"
        then: [T: "vezes"]                      	# 	(en: 'times', google translation)
        else_test:
            if: $ClearSpeak_MultSymbolX = 'By'
            then: [T: "por"]                    	# 	(en: 'by', google translation)
            else: [T: "cross"]                 	# 	(en: 'cross', google translation)

 - "÷": [T: "dividido por"]                     	#  0xf7	(en: 'divided by', google translation)
 - "̀": [T: "acento grave"]     	#  0x300	(en: 'grave accent embellishment', google translation)
 - "́": [T: "acento agudo"]     	#  0x301	(en: 'acute accent embellishment', google translation)
 - "̂": [T: "acento circunflexo"]	#  0x302	(en: 'circumflex accent embellishment', google translation)
 - "̃": [T: "acento tilde"]              	#  0x303	(en: 'tilde embellishment', google translation)
 - "̄": [T: "enfeito de macron"]                	#  0x304	(en: 'macron embellishment', google translation)
 - "̅": [T: "barra superior"]           	#  0x305	(en: 'overbar embellishment', google translation)
 - "̆": [T: "bre"]                              	#  0x306	(en: 'breve', google translation)
 - "̇": [T: "ponto superior"]           	#  0x307	(en: 'dot above embellishment', google translation)

   # Note: ClearSpeak has pref TriangleSymbol for "Δ", but that is wrong
 - "Α-Ω": 
    - test: 
        if: "$CapitalLetters_Beep"
        then:
        - audio:
            value: "beep.mp4"
            replace: []
    - test: 
        if: "$CapitalLetters_UseWord"
        then_test:
          if: "$SpeechOverrides_CapitalLetters = ''"
          then_test:
            if: "$Impairment = 'Blindness'"
            then: [T: "maiúsculas"]             	# 	(en: 'cap', google translation)
          else: [x: "$SpeechOverrides_CapitalLetters"] 
    - pitch:
        value: "$CapitalLetters_Pitch"
        # note: processing of ranges converts '.' into the character, so it needs to be in quotes below
        replace: [spell: "translate('.', 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ΢ΣΤΥΦΧΨΩ', 'αβγδεζηθικλμνξοπρςστυφχψω')"]

 - "α": [T: "alfa"]                             	#  0x3b1	(en: 'alpha', google translation)
 - "β": [T: "beta"]                             	#  0x3b2	(google translation)
 - "γ": [T: "gama"]                             	#  0x3b3	(en: 'gamma', google translation)
 - "δ": [T: "delta"]                            	#  0x3b4	(google translation)
 - "ε": [T: "epsilon"]                          	#  0x3b5	(google translation)
 - "ζ": [T: "zeta"]                             	#  0x3b6	(google translation)
 - "η": [T: "eta"]                              	#  0x3b7	(google translation)
 - "θ": [T: "theta"]                            	#  0x3b8	(google translation)
 - "ι": [T: "iota"]                             	#  0x3b9	(google translation)
 - "κ": [T: "kappa"]                            	#  0x3ba	(google translation)
 - "λ": [T: "lambda"]                           	#  0x3bb	(google translation)
 - "μ": [T: "mu"]                               	#  0x3bc	(google translation)
 - "ν": [T: "nu"]                               	#  0x3bd	(google translation)
 - "ξ": [T: "zai"]                              	#  0x3be	(google translation)
 - "ο": [T: "omicron"]                          	#  0x3bf	(google translation)
 - "π": [T: "pi"]                               	#  0x3c0	(google translation)
 - "ρ": [T: "rho"]                              	#  0x3c1	(google translation)
 - "ς": [T: "sigma final"]                      	#  0x3c2	(en: 'final sigma', google translation)
 - "σ": [T: "sigma"]                            	#  0x3c3	(google translation)
 - "τ": [T: "tau"]                              	#  0x3c4	(google translation)
 - "υ": [T: "upsilon"]                          	#  0x3c5	(google translation)
 - "φ": [T: "phi"]                              	#  0x3c6	(google translation)
 - "χ": [T: "chi"]                              	#  0x3c7	(google translation)
 - "ψ": [T: "psi"]                              	#  0x3c8	(google translation)
 - "ω": [T: "ómega"]                            	#  0x3c9	(en: 'omega', google translation)
 - "ϕ": [T: "phi"]                              	#  0x3d5	(google translation)
 - "ϖ": [T: "pi"]                               	#  0x3d6	(google translation)
 - "ϵ": [T: "epsilon"]                          	#  0x3f5	(google translation)
 - "϶": [T: "epsilon invertido"]                	#  0x3f6	(en: 'reversed epsilon', google translation)

 - "–": [T: "meia-risca"]                          	#  0x2013	(en: 'en dash', google translation)
 - "—": [T: "travessão"]                        	#  0x2014	(en: 'em dash', google translation)
 - "―": [T: "barra horizontal"]                 	#  0x2015	(en: 'horizontal bar', google translation)
 - "‖": [T: "linha vertical dupla"]             	#  0x2016	(en: 'double vertical line', google translation)
 - "…":                                         	#  0x2026
    test:
        if:
            - "$SpeechStyle != 'ClearSpeak' or $ClearSpeak_Ellipses = 'Auto' or"
               # must be ClearSpeak and $ClearSpeak_Ellipses = 'AndSoOn'
               # speak '…' as 'and so on...' unless expr starts with '…'
            - "../*[1][text()='…']"
        then: [T: "três pontos"]          	# 	(en: 'dot dot dot', google translation)
        else_test:                              	#  must have $ClearSpeak_Ellipses = 'AndSoOn'
            if: "count(following-sibling::*) = 0"
            then: [T: "e assim por diante"]     	# 	(en: 'and so on', google translation)
            else: [T: "e assim por diante até"]     	# 	(en: 'and so on up to', google translation)

 - "⁡":                                         	#  0x2061
    - test:
        if: "$Verbosity!='Terse' and not(preceding-sibling::*[1][IsInDefinition(., 'GeometryShapes')]) and
             not(@data-changed='added' and ancestor-or-self::*[contains(@data-intent-property, ':structure:')])"
        then: [T: "de"]                         	# 	(en: 'of', google translation)
 - "⁢": [T: ""]                                 	#  0x2062
 - "⁣": [T: ""]                                 	#  0x2063
 - "⁤": [T: "e"]                                	#  0x2064	(en: 'and', google translation)
 - "′": [T: "aspas"]                           	#  0x2032	(en: 'prime', google translation)
 - "″": [T: "aspas duplas"]                      	#  0x2033	(en: 'double prime', google translation)
 - "‴": [T: "aspas triplas"]                     	#  0x2034	(google translation)

 - "ℂℕℚℝℤ":                                     	#  here we rely on this running through the table again to speak "cap xxx"
    - T: "traço duplo"                            	# 	(en: 'double-struck', google translation)
    - spell: "translate('.', 'ℂℕℚℝℤ', 'CNQRZ')"

 - "℃": [T: "graus celsius"]                    	#  0x2103	(en: 'degrees celsius', google translation)
 - "℉": [T: "graus fahrenheit"]                 	#  0x2109	(en: 'degrees fahrenheit', google translation)
 - "ℋℛℓ":                                       	#  0x210b
    - T: "cursiva"                              	# 	(en: 'script', google translation)
    - spell: "translate('.', 'ℋℛℓ', 'HRl')"
 - "ℎ": [T: "constante de planck"]                 	#  0x210e	(en: 'planck constant', google translation)
 - "ℜ":                                         	#  0x211c
    - T: "fraktur"                              	# 	(google translation)
    - spell: "'R'"

 - "Ω": [T: "ohms"]                             	#  0x2126	(google translation)
 - "K": [T: "kelvin"]                           	#  0x212a	(google translation)
 - "Å": [T: "angstroms"]                        	#  0x212b	(google translation)
 - "ⅆⅇⅈⅉ":                                      	#  0x2146-9
    - T: "itálico de traço duplo"              	# 	(en: 'double-struck italic', google translation)
    - spell: "translate('.', 'ⅆⅇⅈⅉ', 'deij')"

 - "←": [T: "seta para esquerda"]              	#  0x2190	(en: 'leftwards arrow', google translation)
 - "↑": [T: "seta para cima"]                  	#  0x2191	(en: 'upwards arrow', google translation)
 - "→":                                         	#  0x2192
     - test:
        if: "ancestor::*[2][self::m:limit]"
        then: [T: "aproxima-se"]                 	# 	(en: 'approaches', google translation)
        else: [T: "seta para direita"]               	# 	(en: 'right arrow', google translation)

 - "↓": [T: "seta para baixo"]                 	#  0x2193	(en: 'downwards arrow', google translation)
 - "⇒": [T: "seta dupla para direita"]            	#  0x21d2	(en: 'rightwards double arrow', google translation)
 - "∀": [T: "para todo"]                       	#  0x2200	(en: 'for all', google translation)
 - "∂":                                         	#  0x2202
     - test: 
         if: "$Verbosity='Terse'"
         then: [T: "parcial"]                   	# 	(en: 'partial', google translation)
         else: [T: "derivada parcial"]        	# 	(en: 'partial derivative', google translation)
 - "∃": [T: "existe"]                           	#  0x2203	(en: 'there exists', google translation)
 - "∄": [T: "não existe"]                       	#  0x2204	(en: 'there does not exist', google translation)
 - "∅": [T: "conjunto vazio"]                   	#  0x2205	(en: 'empty set', google translation)
 - "∆":                                         	#  0x2206
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "o"]                         	# 	(en: 'the', google translation)
     - T: "laplaciano de"                       	# 	(en: 'laplacian of', google translation)
 - "∇":                                         	#  0x2207
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "o"]                         	# 	(en: 'the', google translation)
     - T: "gradiente de"                        	# 	(en: 'gradient of', google translation)
 - "∈":                                         	#  0x2208
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [T: "um elemento de"]             	# 	(en: 'an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set"	#  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "em"]                 	# 	(en: 'in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "membro de"]          	# 	(en: 'member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "elemento de"]        	# 	(en: 'element of', google translation)
              - else: [T: "pertencendo à"]      	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'belonging to', google translation)
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "é um membro de"]     	# 	(en: 'is a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "é um elemento de"]   	# 	(en: 'is an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "està em"]               	# 	(en: 'is in', google translation)
              - else: [T: "pertence à"]         	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'belongs to', google translation)
 - "∉":                                         	#  0x2209
    # rule is identical to 0x2208
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [T: "não é um elemento de"]       	# 	(en: 'is not an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set"	#  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "não esta em"]             	# 	(en: 'not in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "não é um membro de"]      	# 	(en: 'not member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "não é um elemento de"]    	# 	(en: 'not element of', google translation)
              - else: [T: "não pertencer à"]    	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'not belonging to', google translation)
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "não é um membro de"] 	# 	(en: 'is not a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "não é um elemento de"]	# 	(en: 'is not an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "não está em"]    	# 	(en: 'is not in', google translation)
              - else: [T: "não pertence à"]     	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'does not belong to', google translation)
 - "∊":                                         	#  0x220a
     - test:
        if: "$SpeechStyle != 'ClearSpeak'"
        then: [T: "é um elemento de"]           	# 	(en: 'is an element of', google translation)
        # Several options for speaking elements in ClearSpeak -- they split between being inside a set or not and then the option
        else_test:
            if: "../../self::m:set or ../../../self::m:set"	#  inside a set
            then_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "em"]                 	# 	(en: 'in', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "membro de"]          	# 	(en: 'member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "elemento de"]        	# 	(en: 'element of', google translation)
              - else: [T: "pertencendo à"]      	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'belonging to', google translation)
            else_test:
              - if: $ClearSpeak_SetMemberSymbol = 'Auto' or $ClearSpeak_SetMemberSymbol = 'Member'
                then: [T: "é um membro de"]     	# 	(en: 'is a member of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'Element'
                then: [T: "é um elemento de"]   	# 	(en: 'is an element of', google translation)
              - else_if: $ClearSpeak_SetMemberSymbol = 'In'
                then: [T: "està em"]               	# 	(en: 'is in', google translation)
              - else: [T: "pertence à"]         	#  $ClearSpeak_SetMemberSymbol = 'Belongs'	(en: 'belongs to', google translation)
 - "∏": [T: "produtório"]                         	#  0x220f	(en: 'product', google translation)
 - "∐": [T: "co-produtório"]                      	#  0x2210	(en: 'co-product', google translation)
 - "∑": [T: "somatório"]                             	#  0x2211	(en: 'sum', google translation)
 - "−": [T: "menos"]                            	#  0x2212	(en: 'minus', google translation)
 - "∓": [T: "menos ou mais"]                    	#  0x2213	(en: 'minus or plus', google translation)
 - "∗": [T: "vezes"]                            	#  0x2217	(en: 'times', google translation)
 - "∘": [T: "composto com"]                     	#  0x2218	(en: 'composed with', google translation)
 - "√":                                         	#  0x221a
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "o"]                         	# 	(en: 'the', google translation)
     - T: "raiz quadrada de"                    	# 	(en: 'square root of', google translation)
 - "∝":                                         	#  0x221d
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "proporcional a"                      	# 	(en: 'proportional to', google translation)
 - "∞": [T: "infinito"]                       	#  0x221e	(en: 'infinity', google translation)
 - "∟": [T: "ângulo reto"]                     	#  0x221f	(en: 'right angle', google translation)
 - "∠": [T: "ângulo"]                           	#  0x2220	(en: 'angle', google translation)
 - "∡": [T: "ângulo medido"]                    	#  0x2221	(en: 'measured angle', google translation)
 - "∣": [T: "divide"]                           	#  0x2223	(en: 'divides', google translation)
 - "∤": [T: "não é dividido"]                    	#  0x2224	(en: 'does not divide', google translation)
 - "∥":                                         	#  0x2225
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "paralelo a"                          	# 	(en: 'parallel to', google translation)
 - "∦":                                         	#  0x2226
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "não é paralelo a"                      	# 	(en: 'not parallel to', google translation)
 - "∧": [T: "e"]                                	#  0x2227	(en: 'and', google translation)
 - "∨": [T: "ou"]                               	#  0x2228	(en: 'or', google translation)
 - "∩": [T: "interseção"]                       	#  0x2229	(en: 'intersection', google translation)
 - "∪": [T: "união"]                            	#  0x222a	(en: 'union', google translation)
 - "∫": [T: "integral"]                       	#  0x222b	(en: 'integral', google translation)
 - "∬": [T: "integral dupla"]                   	#  0x222c	(en: 'double integral', google translation)
 - "∭": [T: "integral tripla"]                  	#  0x222d	(en: 'triple integral', google translation)
 - "∮": [T: "contour integral"]                	#  0x222e	(en: 'contour integral', google translation)
 - "∶":                                         	#  0x2236
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "para"                                	# 	(en: 'to', google translation)
 - "∷": [T: "como"]                             	#  0x2237	(en: 'as', google translation)
 - "∼": [T: "varia com"]                        	#  0x223c	(en: 'varies with', google translation)
 - "∽": [T: "til reverso"]                  	#  0x223d	(en: 'reversed tilde', google translation)
 - "∾":                                         	#  0x223e
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "mais positivo"                       	# 	(en: 'most positive', google translation)
 - "∿": [T: "onda senoidal"]                    	#  0x223f	(en: 'sine wave', google translation)
 - "≠":                                         	#  0x2260
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "não é igual a"                         	# 	(en: 'not equal to', google translation)
 - "≡":                                         	#  0x2261
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "idêntico a"                          	# 	(en: 'identical to', google translation)
 - "≤":                                         	#  0x2264
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T:  "menor ou igual a"
 - "≥":                                         	#  0x2265
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "maior ou igual a"               	# 	(en: 'greater than or equal to', google translation)
 - "≦": [t: "menos do que mais igual a"]        	#  0x2266	(en: 'less than over equal to', google translation)
 - "≧": [t: "maior que mais igual a"]           	#  0x2267	(en: 'greater than over equal to', google translation)
 - "≺": [T: "precede"]                         	#  0x227a	(google translation)
 - "≻": [T: "sucede"]                         	#  0x227b	(en: 'succeeds', google translation)
 - "⊂":                                         	#  0x2282
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é um"]                      	# 	(en: 'is a', google translation)
     - T: "subconjunto de"                      	# 	(en: 'subset of', google translation)
 - "⊃":                                         	#  0x2283
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é um"]                      	# 	(en: 'is a', google translation)
     - T: "superset"                         	# 	(en: 'superset of', google translation)
 - "⊄":                                         	#  0x2284
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "não é um subconjunto de"             	# 	(en: 'not a subset of', google translation)
 - "⊅":                                         	#  0x2285
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é"]                         	# 	(en: 'is', google translation)
     - T: "não é um superset de"           	# 	(en: 'not a superset of', google translation)
 - "⊆":                                         	#  0x2286
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é um"]                      	# 	(en: 'is a', google translation)
     - T: "subconjunto ou conjunto igual a"              	# 	(en: 'subset of or equal to', google translation)
 - "⊇":                                         	#  0x2287
     - test: 
         if: "$Verbosity!='Terse'"
         then: [T: "é um"]                      	# 	(en: 'is a', google translation)
     - T: "subconjunto ou conjunto igual a"              	# 	(en: 'superset of or equal to', google translation)
